#!/usr/bin/env python

from functools import wraps
import json
import logging
from urlparse import parse_qsl
import webbrowser

import httplib2
import oauth2 as oauth
from termtool import Termtool, subcommand, argument


def authd(fn):
    @wraps(fn)
    def moo(self, args):
        if not all((args.api_key, args.access_token)):
            logging.error("Not configured to use Tumblr API yet; try 'configure' command first")
            sys.exit(1)

        csr = oauth.Consumer(*args.api_key.split(':', 1))
        token = oauth.Token(*args.access_token.split(':', 1))
        client = oauth.Client(csr, token)
        return fn(self, args, client)
    return moo


@argument('--site', help='Tumblr site to export')
@argument('--api-key', help='Tumblr application API key (in `token:secret` format)')
@argument('--access-token', help='Tumblr access token (in `token:secret` format)')
class Tumblrout(Termtool):

    description = 'Export a Tumblr tumblelog.'

    @subcommand(help='configures the API keys')
    def configure(self, args):
        if not args.api_key:
            token = raw_input('OAuth Consumer Key: ')
            secret = raw_input('Secret Key: ')
            args.api_key = ':'.join((token, secret))

        if not args.access_token:
            csr = oauth.Consumer(*args.api_key.split(':', 1))
            client = oauth.Client(csr)
            oauth_callback = 'http://markpasc.org/'

            http_url = 'http://www.tumblr.com/oauth/request_token'
            oauth_request = oauth.Request.from_consumer_and_token(csr, None,
                http_method='POST', http_url=http_url)
            oauth_request['oauth_callback'] = oauth_callback
            oauth_sign_method = oauth.SignatureMethod_HMAC_SHA1()
            oauth_request.sign_request(oauth_sign_method, csr, None)
            oauth_signing_base = oauth_sign_method.signing_base(oauth_request, csr, None)
            body = oauth_request.to_postdata()

            h = httplib2.Http()
            h.follow_redirects = 0
            normal_url = oauth_request.normalized_url
            logging.debug('Making request to URL %r', normal_url)
            resp, content = h.request(normal_url, method=oauth_request.method, body=body,
                headers={'Content-Type': 'application/x-www-form-urlencoded'})

            if resp.status != 200:
                raise ValueError('Unexpected response asking for Tumblr request token: %d %s: %s' % (resp.status, resp.reason, content))
            if 'content-type' not in resp:
                raise ValueError("Response asking for Tumblr request token unexpectedly had no content type (is Tumblr down?)")

            request_token_data = dict(parse_qsl(content))
            request_token = oauth.Token(request_token_data['oauth_token'], request_token_data['oauth_token_secret'])

            webbrowser.open('http://www.tumblr.com/oauth/authorize?oauth_token=%s&oauth_access_type=write' % (request_token.key,))
            print
            verifier = raw_input("OAuth Verifier: ")

            http_url = 'http://www.tumblr.com/oauth/access_token'
            oauth_request = oauth.Request.from_consumer_and_token(csr, request_token,
                http_method='POST', http_url=http_url)
            oauth_request['oauth_verifier'] = verifier
            oauth_sign_method = oauth.SignatureMethod_HMAC_SHA1()
            oauth_request.sign_request(oauth_sign_method, csr, request_token)
            oauth_signing_base = oauth_sign_method.signing_base(oauth_request, csr, request_token)
            body = oauth_request.to_postdata()

            h = httplib2.Http()
            h.follow_redirects = 0
            normal_url = oauth_request.normalized_url
            logging.debug('Making request to URL %r', normal_url)
            resp, content = h.request(normal_url, method=oauth_request.method, body=body,
                headers={'Content-Type': 'application/x-www-form-urlencoded'})
            if resp.status != 200:
                raise ValueError("Unexpected response exchanging for Tumblr access token: %d %s" % (resp.status, resp.reason))

            access_token_data = dict(parse_qsl(content))
            access_token = oauth.Token(access_token_data['oauth_token'], access_token_data['oauth_token_secret'])

            oauth_request = oauth.Request.from_consumer_and_token(csr, access_token,
                http_method='POST', http_url='http://www.tumblr.com/api/authenticate')
            oauth_request.sign_request(oauth_sign_method, csr, access_token)

            resp, cont = h.request(oauth_request.normalized_url, method=oauth_request.method,
                body=oauth_request.to_postdata(), headers={'Content-Type': 'application/x-www-form-urlencoded'})
            if resp.status != 200:
                raise ValueError("Unexpected response checking Tumblr access token: %d %s" % (resp.status, resp.reason))

            args.access_token = ':'.join((access_token.key, access_token.secret))
            logging.debug("ACCESS TOKEN: %r", args.access_token)

        self.write_config_file(
            '--api-key', args.api_key,
            '--access-token', args.access_token,
        )

        print "Configured!"

    @subcommand(help='herp derp')
    @authd
    def verify(self, args, client):
        resp, cont = client.request('http://www.tumblr.com/api/authenticate', method='POST', body='', headers={'Content-Type': 'application/x-www-form-urlencoded'})
        if resp.status == 500:
            logging.warn("Server error verifying authentication")
            return
        if resp.status == 408:
            logging.warn("Timeout verifying authentication (is Tumblr down/slow?)")
            return
        if resp.status != 200:
            raise ValueError("Unexpected HTTP response %d %s verifying authentication" % (resp.status, resp.reason))
        content_type = resp.get('content-type')
        if content_type is None:
            logging.warn("Response verifying authentication had no content type (is Tumblr down?)")
            return
        if not content_type.startswith('text/xml'):
            logging.warn("Unexpected response of type %r verifying authentication (expected text/xml)", content_type)
            return

        logging.info("Verified!")


if __name__ == '__main__':
    Tumblrout().run()
