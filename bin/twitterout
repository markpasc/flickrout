#!/usr/bin/env python

from functools import wraps
import json
import logging
from os.path import join
from urllib import urlencode
from urlparse import parse_qsl, urlunsplit

import httplib2
import oauth2 as oauth
from termtool import Termtool, subcommand, argument


def authd(fn):
    @wraps(fn)
    def moo(self, args):
        if not all((args.api_key, args.access_token)):
            logging.error("Not configured to use Twitter API yet; try 'configure' command first")
            sys.exit(1)

        csr = oauth.Consumer(*args.api_key.split(':', 1))
        token = oauth.Token(*args.access_token.split(':', 1))
        client = oauth.Client(csr, token)
        return fn(self, args, client)
    return moo


@argument('--api-key', help='Twitter application API key (in `token:secret` format)')
@argument('--access-token', help='Twitter access token (in `token:secret` format)')
class Twitterout(Termtool):

    description = 'Export a Twitter.'

    @subcommand(help='configures the API keys')
    def configure(self, args):
        if not args.api_key:
            token = raw_input('Consumer key: ')
            secret = raw_input('Consumer secret: ')
            args.api_key = ':'.join((token, secret))

        if not args.access_token:
            token = raw_input('Access token: ')
            secret = raw_input('Access token secret: ')
            args.access_token = ':'.join((token, secret))

        self.write_config_file(
            '--api-key', args.api_key,
            '--access-token', args.access_token,
        )

        print "Configured!"

    @subcommand(help='verify that the saved authentication keys are good')
    @authd
    def verify(self, args, client):
        resp, cont = client.request('https://api.twitter.com/1.1/account/verify_credentials.json')
        if resp.status == 500:
            logging.warn("Server error verifying authentication")
            return
        if resp.status == 408:
            logging.warn("Timeout verifying authentication (is Twitter down/slow?)")
            return
        if resp.status != 200:
            raise ValueError("Unexpected HTTP response %d %s verifying authentication" % (resp.status, resp.reason))
        content_type = resp.get('content-type')
        if content_type is None:
            logging.warn("Response verifying authentication had no content type (is Twitter down?)")
            return
        if not content_type.startswith('application/json'):
            logging.warn("Unexpected response of type %r verifying authentication (expected application/json)", content_type)
            return

        logging.info("Verified!")

    @argument('site', help='domain of the site to export')
    @argument('dir', help='directory to write files to')
    @subcommand(help='export a Tumblr tumblelog')
    @authd
    def export(self, args, client):
        read_options = {
            'start': 0,
            'num': 50,
        }

        total = 0
        while read_options['start'] <= total:
            api_url = urlunsplit(('http', args.site, '/api/read', None, None))
            logging.info("Fetching new page of %d posts starting at %d", read_options['num'], read_options['start'])
            resp, cont = client.request(api_url, method='POST', body=urlencode(read_options), headers={'Content-Type': 'application/x-www-form-urlencoded'})
            if resp.status != 200:
                raise ValueError("Unexpected HTTP response %d %s requesting posts" % (resp.status, resp.reason))

            doc = ElementTree.fromstring(cont)

            posts = doc.find('posts')
            total = int(posts.get('total'))

            for post in posts.findall('post'):
                post_id = post.get('id')
                logging.info('Saving out post #%s', post_id)
                with open(join(args.dir, post_id + '.xml'), 'w') as f:
                    f.write(ElementTree.tostring(post, 'utf-8'))

                if post.get('type') == 'photo':
                    photo_urls = sorted(post.findall('photo-url'), key=lambda el: int(el.get('max-width')))
                    photo_url = photo_urls[-1].text
                    logging.info('Fetching photo for post #%s', post_id)
                    resp, cont = client.request(photo_url)
                    assert resp.status == 200
                    ext = photo_url.split('.')[-1]
                    with open(join(args.dir, '%s.%s' % (post_id, ext)), 'wb') as f:
                        f.write(cont)

            read_options['start'] += read_options['num']


if __name__ == '__main__':
    Twitterout().run()
