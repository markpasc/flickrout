#!/usr/bin/env python

from functools import wraps
import codecs
import json
import logging
import os
from os.path import join, isdir
import time
from urllib import urlencode, urlretrieve
from urlparse import parse_qsl, urlunsplit

import httplib2
import oauth2 as oauth
from termtool import Termtool, subcommand, argument


def join_mkdir(*args):
    dirpath = join(*args)
    if not isdir(dirpath):
        os.makedirs(dirpath)
    return dirpath


def authd(fn):
    @wraps(fn)
    def moo(self, args):
        if not all((args.api_key, args.access_token)):
            logging.error("Not configured to use Twitter API yet; try 'configure' command first")
            sys.exit(1)

        csr = oauth.Consumer(*args.api_key.split(':', 1))
        token = oauth.Token(*args.access_token.split(':', 1))
        client = oauth.Client(csr, token)
        return fn(self, args, client)
    return moo


@argument('--api-key', help='Twitter application API key (in `token:secret` format)')
@argument('--access-token', help='Twitter access token (in `token:secret` format)')
class Twitterout(Termtool):

    description = 'Export a Twitter.'

    @subcommand(help='configures the API keys')
    def configure(self, args):
        if not args.api_key:
            token = raw_input('Consumer key: ')
            secret = raw_input('Consumer secret: ')
            args.api_key = ':'.join((token, secret))

        if not args.access_token:
            token = raw_input('Access token: ')
            secret = raw_input('Access token secret: ')
            args.access_token = ':'.join((token, secret))

        self.write_config_file(
            '--api-key', args.api_key,
            '--access-token', args.access_token,
        )

        print "Configured!"

    @subcommand(help='verify that the saved authentication keys are good')
    @authd
    def verify(self, args, client):
        resp, cont = client.request('https://api.twitter.com/1.1/account/verify_credentials.json')
        if resp.status == 500:
            logging.warn("Server error verifying authentication")
            return
        if resp.status == 408:
            logging.warn("Timeout verifying authentication (is Twitter down/slow?)")
            return
        if resp.status != 200:
            raise ValueError("Unexpected HTTP response %d %s verifying authentication" % (resp.status, resp.reason))
        content_type = resp.get('content-type')
        if content_type is None:
            logging.warn("Response verifying authentication had no content type (is Twitter down?)")
            return
        if not content_type.startswith('application/json'):
            logging.warn("Unexpected response of type %r verifying authentication (expected application/json)", content_type)
            return

        logging.info("Verified!")

    def raise_for_response(self, resp, url, cont, expect=200):
        if resp.status != expect:
            logging.debug("ERROR RESPONSE: " + cont)
            raise ValueError("Unexpected HTTP response %d %s making request %s" % (resp.status, resp.reason, url))
        content_type = resp.get('content-type')
        if not content_type or not content_type.startswith('application/json'):
            raise ValueError("Unexpected content type '%s' for request %s" % (content_type, url))

    def save_tweet(self, dirname, tweet):
        # Write out the JSON.
        tweet_id = tweet['id_str']
        filepath = join(dirname, tweet_id + '.json')
        with codecs.open(filepath, 'w', 'utf8') as f:
            json.dump(tweet, f, indent=4, sort_keys=True)

        # Save the tweet's media.
        for picture in tweet.get('entities', {}).get('media', ()):
            pic_id = picture['id_str']
            _, ext = picture['media_url'].rsplit('.', 1)
            url = picture['media_url'] + ':large'
            filename = '.'.join((pic_id, ext))
            filepath = join(dirname, filename)
            urlretrieve(url, filepath)

    def request_with_wait(self, client, *args, **kwargs):
        while True:
            resp, cont = client.request(*args, **kwargs)

            if resp.status == 502:
                logging.warn("Over capacity; trying again in 10 seconds")
                time.sleep(10)
                continue

            # If we were throttled, wait until we get more requests. Wait if
            # we're just out of requests, too -- we don't have to but it'd be
            # hard to make the next request wait.
            if resp.status == 429 or not int(resp['x-rate-limit-remaining']):
                reset_time = int(resp['x-rate-limit-reset'])
                # Wait ten extra seconds in case of skew.
                to_sleep = int(reset_time - time.time()) + 10

                log_msg = ("Rate limited; trying again in %d seconds" if resp.status == 429
                    else "Out of requests; continuing in %d seconds")
                logging.warn(log_msg, to_sleep)

                time.sleep(to_sleep)

            # If we weren't throttled (even if we waited to avoid a throttle),
            # we can return this result now.
            if resp.status != 429:
                break

        return resp, cont

    def add_retweeted_users(self, client, retweets_for_retweeted_user_id):
        # Make a shallow copy so we can delete elements without spooky action.
        retweets_for_retweeted_user_id = dict(retweets_for_retweeted_user_id)

        while retweets_for_retweeted_user_id:
            # Twitter recommends using POST for this request, since a request
            # with up to 100 user IDs might be big. But you also can't POST
            # with a read-only app. So sip a few user IDs with GETs instead.
            keys = retweets_for_retweeted_user_id.keys()[:15]
            body = urlencode({'user_id': ','.join(keys)})
            api_url = 'https://api.twitter.com/1.1/users/lookup.json?' + body
            resp, cont = self.request_with_wait(client, api_url)

            self.raise_for_response(resp, api_url, cont)

            users = json.loads(cont)
            for user in users:
                user_id = user['id_str']
                retweets = retweets_for_retweeted_user_id[user_id]
                for retweet in retweets:
                    retweet['retweeted_status']['user'] = user

            # Delete all the keys we asked about. Eventually the dict will be
            # empty and the loop will end.
            for key in keys:
                del retweets_for_retweeted_user_id[key]

    def fetch_tweets(self, args, client, dirname, api_path, api_args):
        tweet_dir = join_mkdir(args.dir, dirname)
        latest_id = None
        retweets_for_retweeted_user_id = dict()

        while True:
            query_args = dict(api_args)
            if latest_id is not None:
                query_args['max_id'] = latest_id - 1
            api_url = urlunsplit(('https', 'api.twitter.com', api_path, urlencode(query_args), None))
            resp, cont = self.request_with_wait(client, api_url)

            self.raise_for_response(resp, api_url, cont)

            tweets = json.loads(cont)
            if not tweets:
                break
            for tweet in tweets:
                # Note a retweet to get full retweeted user info later.
                if tweet.get('retweeted_status') is not None:
                    retweet_user_id = tweet['retweeted_status']['user']['id_str']
                    retweets = retweets_for_retweeted_user_id.setdefault(retweet_user_id, list())
                    retweets.append(tweet)
                else:
                    self.save_tweet(tweet_dir, tweet)

            latest_id = min(t['id'] for t in tweets)
            logging.debug("Successful request through %r leaves %s requests until %s"
                % (latest_id, resp['x-rate-limit-remaining'], resp['x-rate-limit-reset']))

        # Fill in retweets' user data and save.
        self.add_retweeted_users(client, retweets_for_retweeted_user_id)
        for retweets in retweets_for_retweeted_user_id.itervalues():
            for retweet in retweets:
                self.save_tweet(tweet_dir, retweet)

        logging.info("Saved all tweets!")

    @argument('dir', help='directory to write files to')
    @subcommand(help="export a Twitter's tweets")
    @authd
    def tweets(self, args, client):
        api_args = {
            'count': 200,
            'include_rts': 'true',
            'trim_user': 'true',  # only user's user, retweet users still present
        }
        self.fetch_tweets(args, client, 'tweets', '/1.1/statuses/user_timeline.json', api_args)

    @argument('dir', help='directory to write files to')
    @subcommand(help="export a Twitter's favorites")
    @authd
    def favorites(self, args, client):
        api_args = {
            'count': 200,
        }
        self.fetch_tweets(args, client, 'favorites', '/1.1/favorites/list.json', api_args)

    @argument('dir', help='directory to write files to')
    @subcommand(help="export a Twitter's mentions")
    @authd
    def mentions(self, args, client):
        api_args = {
            'count': 200,
        }
        self.fetch_tweets(args, client, 'mentions', '/1.1/statuses/mentions_timeline.json', api_args)


if __name__ == '__main__':
    Twitterout().run()
